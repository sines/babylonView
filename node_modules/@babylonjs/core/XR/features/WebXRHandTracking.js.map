{"version":3,"file":"WebXRHandTracking.js","sourceRoot":"","sources":["../../../../sourceES6/core/XR/features/WebXRHandTracking.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAE9D,OAAO,EAAE,gBAAgB,EAAE,MAAM,yBAAyB,CAAC;AAG3D,OAAO,EAAE,aAAa,EAAE,MAAM,qCAAqC,CAAC;AAGpE,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAC;AAErD,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAChE,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAE/D,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AAwFnD;;GAEG;AACH;IAqBI;;;;OAIG;IACH;IACI,kDAAkD;IAClC,YAA8B;IAC9C,qDAAqD;IACrC,aAA6B;QAF7B,iBAAY,GAAZ,YAAY,CAAkB;QAE9B,kBAAa,GAAb,aAAa,CAAgB;QAE7C,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,2BAA2B,CAAC,YAAY,CAAC,WAAW,CAAC,IAAK,CAAC,CAAC;IAChG,CAAC;IA3BD;;;OAGG;IACK,+CAA2B,GAAnC,UAAoC,IAAY;;QAC5C;YACI,0BAAkB,CAAC,IAAI,CAAC,KAAK,CAAC;YAC9B,0BAAkB,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,iBAAiB,CAAC;YACzH,0BAAkB,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,0BAA0B,EAAE,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,iBAAiB,CAAC;YAC1J,4BAAmB,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,uBAAuB,EAAE,IAAI,CAAC,2BAA2B,EAAE,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,kBAAkB,CAAC;YAChK,wBAAiB,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,yBAAyB,EAAE,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,gBAAgB,CAAC;YACpJ,4BAAmB,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,uBAAuB,EAAE,IAAI,CAAC,2BAA2B,EAAE,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,kBAAkB,CAAC;eAClK;IACN,CAAC;IAgBD;;;;;OAKG;IACI,qCAAiB,GAAxB,UAAyB,OAAgB,EAAE,cAAgC,EAAE,WAAuB;QAAvB,4BAAA,EAAA,eAAuB;QAChG,IAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC;QAChD,IAAI,CAAC,IAAI,EAAE;YACP,OAAO;SACV;QACD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,GAAG;YACjC,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1B,IAAI,OAAO,EAAE;gBACT,IAAI,IAAI,GAAG,OAAO,CAAC,YAAa,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;gBAC1D,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;oBAC1B,OAAO;iBACV;gBACD,wEAAwE;gBACxE,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;gBACpC,IAAM,aAAW,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;gBAC/C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBACvC,IAAI,CAAC,kBAAmB,CAAC,GAAG,CAAC,aAAW,CAAC,CAAC,EAAE,aAAW,CAAC,CAAC,EAAE,aAAW,CAAC,CAAC,EAAE,aAAW,CAAC,CAAC,CAAC,CAAC;gBACzF,gCAAgC;gBAChC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,oBAAoB,EAAE;oBACvC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACtB,IAAI,CAAC,kBAAmB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACjC,IAAI,CAAC,kBAAmB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;iBACpC;gBACD,oHAAoH;gBACpH,IAAM,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,GAAG,WAAW,CAAC;gBACpD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;aAC5C;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACI,qCAAiB,GAAxB,UAAyB,IAAc;QAAvC,iBAEC;QADG,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAvB,CAAuB,CAAC,CAAC;IAChF,CAAC;IAED;;OAEG;IACI,2BAAO,GAAd;QACI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,OAAO,EAAE,EAAd,CAAc,CAAC,CAAC;IACzD,CAAC;IACL,gBAAC;AAAD,CAAC,AAtFD,IAsFC;;AAED;;GAEG;AACH;IAAuC,qCAAoB;IA6BvD;;;;OAIG;IACH,2BACI,iBAAsC;IACtC;;OAEG;IACa,OAAkC;QALtD,YAOI,kBAAM,iBAAiB,CAAC,SAE3B;QAJmB,aAAO,GAAP,OAAO,CAA2B;QA1BtD;;WAEG;QACI,2BAAqB,GAA0B,IAAI,UAAU,EAAE,CAAC;QACvE;;WAEG;QACI,6BAAuB,GAA0B,IAAI,UAAU,EAAE,CAAC;QAEjE,YAAM,GAKV,EAAE,CAAC;QAsGC,iBAAW,GAAG,UAAC,YAA8B;;YACjD,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,IAAI,KAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;gBACtE,mBAAmB;gBACnB,OAAO;aACV;YAED,IAAM,IAAI,GAAG,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC;YAC3C,IAAM,aAAa,GAAmB,EAAE,CAAC;YACzC,IAAM,YAAY,GAAG,OAAA,KAAI,CAAC,OAAO,CAAC,WAAW,0CAAE,UAAU,KAAI,aAAa,CAAC,YAAY,CAAC,aAAa,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;YACxH,YAAY,CAAC,SAAS,GAAG,CAAC,QAAC,KAAI,CAAC,OAAO,CAAC,WAAW,0CAAE,mBAAmB,CAAA,CAAC;YACzE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;gBAClC,IAAI,WAAW,GAAiB,YAAY,CAAC,cAAc,CAAI,YAAY,CAAC,QAAQ,mBAAc,CAAG,CAAC,CAAC;gBACvG,UAAI,KAAI,CAAC,OAAO,CAAC,WAAW,0CAAE,wBAAwB,EAAE;oBACpD,IAAM,YAAY,GAAG,KAAI,CAAC,OAAO,CAAC,WAAW,CAAC,wBAAwB,CAAC,WAA4B,EAAE,CAAC,EAAE,YAAY,CAAC,QAAQ,CAAC,CAAC;oBAC/H,IAAI,YAAY,EAAE;wBACd,IAAI,YAAY,KAAK,WAAW,EAAE;4BAC9B,WAAW,CAAC,OAAO,EAAE,CAAC;4BACtB,WAAW,GAAG,YAAY,CAAC;yBAC9B;qBACJ;iBACJ;gBACD,WAAW,CAAC,UAAU,GAAG,KAAK,CAAC;gBAC/B,UAAI,KAAI,CAAC,OAAO,CAAC,WAAW,0CAAE,aAAa,EAAE;oBACzC,IAAM,KAAK,GAAG,KAAI,CAAC,OAAO,CAAC,WAAW,CAAC,YAAY,IAAI,EAAE,CAAC;oBAC1D,IAAM,IAAI,GAAG,KAAK,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,eAAe,CAAC,cAAc,CAAC;oBACpG,WAAW,CAAC,eAAe,GAAG,IAAI,eAAe,CAAC,WAAW,EAAE,IAAI,aAAI,IAAI,EAAE,CAAC,IAAK,KAAK,EAAG,CAAC;iBAC/F;gBACD,WAAW,CAAC,kBAAkB,GAAG,IAAI,UAAU,EAAE,CAAC;gBAClD,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACnC;YAED,IAAM,SAAS,GAAG,IAAI,SAAS,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YAE7D,qBAAqB;YACrB,KAAI,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG;gBACjC,UAAU,EAAE,SAAS;gBACrB,EAAE,EAAE,iBAAiB,CAAC,UAAU,EAAE;aACrC,CAAC;YAEF,KAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAC1D,CAAC,CAAC;QA/HE,KAAI,CAAC,mBAAmB,GAAG,eAAe,CAAC;;IAC/C,CAAC;IAED;;;OAGG;IACI,wCAAY,GAAnB;QACI,OAAO,OAAO,MAAM,KAAK,WAAW,CAAC;IACzC,CAAC;IAED;;;;;OAKG;IACI,kCAAM,GAAb;QAAA,iBAYC;QAXG,IAAI,CAAC,iBAAM,MAAM,WAAE,EAAE;YACjB,OAAO,KAAK,CAAC;SAChB;QACD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3D,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,2BAA2B,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/F,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,6BAA6B,EAAE,UAAC,UAAU;YACtF,wBAAwB;YACxB,KAAI,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACI,kCAAM,GAAb;QAAA,iBAUC;QATG,IAAI,CAAC,iBAAM,MAAM,WAAE,EAAE;YACjB,OAAO,KAAK,CAAC;SAChB;QAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAC,YAAY;YAC1C,KAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACI,mCAAO,GAAd;QACI,iBAAM,OAAO,WAAE,CAAC;QAChB,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;IACvC,CAAC;IAED;;;;OAIG;IACI,iDAAqB,GAA5B,UAA6B,YAAoB;;QAC7C,OAAO,OAAA,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,0CAAE,UAAU,KAAI,IAAI,CAAC;IACzD,CAAC;IAED;;;;OAIG;IACI,+CAAmB,GAA1B,UAA2B,UAAwB;QAAnD,iBAOC;QANG,IAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,WAAW,CAAC,UAAU,EAA/D,CAA+D,CAAC,CAAC;QAC5H,IAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/C,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;YACd,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC;SACxC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAES,sCAAU,GAApB,UAAqB,QAAiB;QAAtC,iBAKC;QAJG,gCAAgC;QAChC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAC,EAAE;;YAChC,KAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,QAAQ,EAAE,KAAI,CAAC,iBAAiB,CAAC,cAAc,QAAE,KAAI,CAAC,OAAO,CAAC,WAAW,0CAAE,WAAW,CAAC,CAAC;QACzI,CAAC,CAAC,CAAC;IACP,CAAC;IA4CO,uCAAW,GAAnB,UAAoB,YAAoB;QACpC,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;YAC3B,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC,CAAC;YACnF,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;SAClD;IACL,CAAC;IA/Kc,4BAAU,GAAG,CAAC,CAAC;IAC9B;;OAEG;IACoB,sBAAI,GAAG,gBAAgB,CAAC,aAAa,CAAC;IAC7D;;;;OAIG;IACoB,yBAAO,GAAG,CAAC,CAAC;IAsKvC,wBAAC;CAAA,AAjLD,CAAuC,oBAAoB,GAiL1D;SAjLY,iBAAiB;AAmL9B,qBAAqB;AACrB,oBAAoB,CAAC,eAAe,CAChC,iBAAiB,CAAC,IAAI,EACtB,UAAC,gBAAgB,EAAE,OAAO;IACtB,OAAO,cAAM,OAAA,IAAI,iBAAiB,CAAC,gBAAgB,EAAE,OAAO,CAAC,EAAhD,CAAgD,CAAC;AAClE,CAAC,EACD,iBAAiB,CAAC,OAAO,EACzB,KAAK,CACR,CAAC","sourcesContent":["import { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\nimport { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { WebXRFeatureName } from \"../webXRFeaturesManager\";\r\nimport { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { SphereBuilder } from \"../../Meshes/Builders/sphereBuilder\";\r\nimport { WebXRInput } from \"../webXRInput\";\r\nimport { WebXRInputSource } from \"../webXRInputSource\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\nimport { Nullable } from \"../../types\";\r\nimport { PhysicsImpostor } from \"../../Physics/physicsImpostor\";\r\nimport { WebXRFeaturesManager } from \"../webXRFeaturesManager\";\r\nimport { IDisposable } from \"../../scene\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { InstancedMesh } from \"../../Meshes/instancedMesh\";\r\n\r\ndeclare const XRHand: XRHand;\r\n\r\n/**\r\n * Configuration interface for the hand tracking feature\r\n */\r\nexport interface IWebXRHandTrackingOptions {\r\n    /**\r\n     * The xrInput that will be used as source for new hands\r\n     */\r\n    xrInput: WebXRInput;\r\n\r\n    /**\r\n     * Configuration object for the joint meshes\r\n     */\r\n    jointMeshes?: {\r\n        /**\r\n         * Should the meshes created be invisible (defaults to false)\r\n         */\r\n        invisible?: boolean;\r\n        /**\r\n         * A source mesh to be used to create instances. Defaults to a sphere.\r\n         * This mesh will be the source for all other (25) meshes.\r\n         * It should have the general size of a single unit, as the instances will be scaled according to the provided radius\r\n         */\r\n        sourceMesh?: Mesh;\r\n\r\n        /**\r\n         * This function will be called after a mesh was created for a specific joint.\r\n         * Using this function you can either manipulate the instance or return a new mesh.\r\n         * When returning a new mesh the instance created before will be disposed\r\n         */\r\n        onHandJointMeshGenerated?: (meshInstance: InstancedMesh, jointId: number, controllerId: string) => Mesh | undefined;\r\n        /**\r\n         * Should the source mesh stay visible. Defaults to false\r\n         */\r\n        keepOriginalVisible?: boolean;\r\n        /**\r\n         * Scale factor for all instances (defaults to 2)\r\n         */\r\n        scaleFactor?: number;\r\n        /**\r\n         * Should each instance have its own physics impostor\r\n         */\r\n        enablePhysics?: boolean;\r\n        /**\r\n         * If enabled, override default physics properties\r\n         */\r\n        physicsProps?: { friction?: number; restitution?: number; impostorType?: number };\r\n        /**\r\n         * For future use - a single hand-mesh that will be updated according to the XRHand data provided\r\n         */\r\n        handMesh?: AbstractMesh;\r\n    };\r\n}\r\n\r\n/**\r\n * Parts of the hands divided to writs and finger names\r\n */\r\nexport const enum HandPart {\r\n    /**\r\n     * HandPart - Wrist\r\n     */\r\n    WRIST = \"wrist\",\r\n    /**\r\n     * HandPart - The THumb\r\n     */\r\n    THUMB = \"thumb\",\r\n    /**\r\n     * HandPart - Index finger\r\n     */\r\n    INDEX = \"index\",\r\n    /**\r\n     * HandPart - Middle finger\r\n     */\r\n    MIDDLE = \"middle\",\r\n    /**\r\n     * HandPart - Ring finger\r\n     */\r\n    RING = \"ring\",\r\n    /**\r\n     * HandPart - Little finger\r\n     */\r\n    LITTLE = \"little\",\r\n}\r\n\r\n/**\r\n * Representing a single hand (with its corresponding native XRHand object)\r\n */\r\nexport class WebXRHand implements IDisposable {\r\n    /**\r\n     * Hand-parts definition (key is HandPart)\r\n     */\r\n    public handPartsDefinition: { [key: string]: number[] };\r\n\r\n    /**\r\n     * Populate the HandPartsDefinition object.\r\n     * This is called as a side effect since certain browsers don't have XRHand defined.\r\n     */\r\n    private generateHandPartsDefinition(hand: XRHand) {\r\n        return {\r\n            [HandPart.WRIST]: [hand.WRIST],\r\n            [HandPart.THUMB]: [hand.THUMB_METACARPAL, hand.THUMB_PHALANX_PROXIMAL, hand.THUMB_PHALANX_DISTAL, hand.THUMB_PHALANX_TIP],\r\n            [HandPart.INDEX]: [hand.INDEX_METACARPAL, hand.INDEX_PHALANX_PROXIMAL, hand.INDEX_PHALANX_INTERMEDIATE, hand.INDEX_PHALANX_DISTAL, hand.INDEX_PHALANX_TIP],\r\n            [HandPart.MIDDLE]: [hand.MIDDLE_METACARPAL, hand.MIDDLE_PHALANX_PROXIMAL, hand.MIDDLE_PHALANX_INTERMEDIATE, hand.MIDDLE_PHALANX_DISTAL, hand.MIDDLE_PHALANX_TIP],\r\n            [HandPart.RING]: [hand.RING_METACARPAL, hand.RING_PHALANX_PROXIMAL, hand.RING_PHALANX_INTERMEDIATE, hand.RING_PHALANX_DISTAL, hand.RING_PHALANX_TIP],\r\n            [HandPart.LITTLE]: [hand.LITTLE_METACARPAL, hand.LITTLE_PHALANX_PROXIMAL, hand.LITTLE_PHALANX_INTERMEDIATE, hand.LITTLE_PHALANX_DISTAL, hand.LITTLE_PHALANX_TIP],\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Construct a new hand object\r\n     * @param xrController the controller to which the hand correlates\r\n     * @param trackedMeshes the meshes to be used to track the hand joints\r\n     */\r\n    constructor(\r\n        /** the controller to which the hand correlates */\r\n        public readonly xrController: WebXRInputSource,\r\n        /** the meshes to be used to track the hand joints */\r\n        public readonly trackedMeshes: AbstractMesh[]\r\n    ) {\r\n        this.handPartsDefinition = this.generateHandPartsDefinition(xrController.inputSource.hand!);\r\n    }\r\n\r\n    /**\r\n     * Update this hand from the latest xr frame\r\n     * @param xrFrame xrFrame to update from\r\n     * @param referenceSpace The current viewer reference space\r\n     * @param scaleFactor optional scale factor for the meshes\r\n     */\r\n    public updateFromXRFrame(xrFrame: XRFrame, referenceSpace: XRReferenceSpace, scaleFactor: number = 2) {\r\n        const hand = this.xrController.inputSource.hand;\r\n        if (!hand) {\r\n            return;\r\n        }\r\n        this.trackedMeshes.forEach((mesh, idx) => {\r\n            const xrJoint = hand[idx];\r\n            if (xrJoint) {\r\n                let pose = xrFrame.getJointPose!(xrJoint, referenceSpace);\r\n                if (!pose || !pose.transform) {\r\n                    return;\r\n                }\r\n                // get the transformation. can be done with matrix decomposition as well\r\n                const pos = pose.transform.position;\r\n                const orientation = pose.transform.orientation;\r\n                mesh.position.set(pos.x, pos.y, pos.z);\r\n                mesh.rotationQuaternion!.set(orientation.x, orientation.y, orientation.z, orientation.w);\r\n                // left handed system conversion\r\n                if (!mesh.getScene().useRightHandedSystem) {\r\n                    mesh.position.z *= -1;\r\n                    mesh.rotationQuaternion!.z *= -1;\r\n                    mesh.rotationQuaternion!.w *= -1;\r\n                }\r\n                // get the radius of the joint. In general it is static, but just in case it does change we update it on each frame.\r\n                const radius = (pose.radius || 0.008) * scaleFactor;\r\n                mesh.scaling.set(radius, radius, radius);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get meshes of part of the hand\r\n     * @param part the part of hand to get\r\n     * @returns An array of meshes that correlate to the hand part requested\r\n     */\r\n    public getHandPartMeshes(part: HandPart): AbstractMesh[] {\r\n        return this.handPartsDefinition[part].map((idx) => this.trackedMeshes[idx]);\r\n    }\r\n\r\n    /**\r\n     * Dispose this Hand object\r\n     */\r\n    public dispose() {\r\n        this.trackedMeshes.forEach((mesh) => mesh.dispose());\r\n    }\r\n}\r\n\r\n/**\r\n * WebXR Hand Joint tracking feature, available for selected browsers and devices\r\n */\r\nexport class WebXRHandTracking extends WebXRAbstractFeature {\r\n    private static _idCounter = 0;\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.HAND_TRACKING;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n\r\n    /**\r\n     * This observable will notify registered observers when a new hand object was added and initialized\r\n     */\r\n    public onHandAddedObservable: Observable<WebXRHand> = new Observable();\r\n    /**\r\n     * This observable will notify its observers right before the hand object is disposed\r\n     */\r\n    public onHandRemovedObservable: Observable<WebXRHand> = new Observable();\r\n\r\n    private _hands: {\r\n        [controllerId: string]: {\r\n            id: number;\r\n            handObject: WebXRHand;\r\n        };\r\n    } = {};\r\n\r\n    /**\r\n     * Creates a new instance of the hit test feature\r\n     * @param _xrSessionManager an instance of WebXRSessionManager\r\n     * @param options options to use when constructing this feature\r\n     */\r\n    constructor(\r\n        _xrSessionManager: WebXRSessionManager,\r\n        /**\r\n         * options to use when constructing this feature\r\n         */\r\n        public readonly options: IWebXRHandTrackingOptions\r\n    ) {\r\n        super(_xrSessionManager);\r\n        this.xrNativeFeatureName = \"hand-tracking\";\r\n    }\r\n\r\n    /**\r\n     * Check if the needed objects are defined.\r\n     * This does not mean that the feature is enabled, but that the objects needed are well defined.\r\n     */\r\n    public isCompatible(): boolean {\r\n        return typeof XRHand !== \"undefined\";\r\n    }\r\n\r\n    /**\r\n     * attach this feature\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public attach(): boolean {\r\n        if (!super.attach()) {\r\n            return false;\r\n        }\r\n        this.options.xrInput.controllers.forEach(this._attachHand);\r\n        this._addNewAttachObserver(this.options.xrInput.onControllerAddedObservable, this._attachHand);\r\n        this._addNewAttachObserver(this.options.xrInput.onControllerRemovedObservable, (controller) => {\r\n            // REMOVE the controller\r\n            this._detachHand(controller.uniqueId);\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * detach this feature.\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public detach(): boolean {\r\n        if (!super.detach()) {\r\n            return false;\r\n        }\r\n\r\n        Object.keys(this._hands).forEach((controllerId) => {\r\n            this._detachHand(controllerId);\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n        this.onHandAddedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Get the hand object according to the controller id\r\n     * @param controllerId the controller id to which we want to get the hand\r\n     * @returns null if not found or the WebXRHand object if found\r\n     */\r\n    public getHandByControllerId(controllerId: string): Nullable<WebXRHand> {\r\n        return this._hands[controllerId]?.handObject || null;\r\n    }\r\n\r\n    /**\r\n     * Get a hand object according to the requested handedness\r\n     * @param handedness the handedness to request\r\n     * @returns null if not found or the WebXRHand object if found\r\n     */\r\n    public getHandByHandedness(handedness: XRHandedness): Nullable<WebXRHand> {\r\n        const handednesses = Object.keys(this._hands).map((key) => this._hands[key].handObject.xrController.inputSource.handedness);\r\n        const found = handednesses.indexOf(handedness);\r\n        if (found !== -1) {\r\n            return this._hands[found].handObject;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected _onXRFrame(_xrFrame: XRFrame): void {\r\n        // iterate over the hands object\r\n        Object.keys(this._hands).forEach((id) => {\r\n            this._hands[id].handObject.updateFromXRFrame(_xrFrame, this._xrSessionManager.referenceSpace, this.options.jointMeshes?.scaleFactor);\r\n        });\r\n    }\r\n\r\n    private _attachHand = (xrController: WebXRInputSource) => {\r\n        if (!xrController.inputSource.hand || this._hands[xrController.uniqueId]) {\r\n            // already attached\r\n            return;\r\n        }\r\n\r\n        const hand = xrController.inputSource.hand;\r\n        const trackedMeshes: AbstractMesh[] = [];\r\n        const originalMesh = this.options.jointMeshes?.sourceMesh || SphereBuilder.CreateSphere(\"jointParent\", { diameter: 1 });\r\n        originalMesh.isVisible = !!this.options.jointMeshes?.keepOriginalVisible;\r\n        for (let i = 0; i < hand.length; ++i) {\r\n            let newInstance: AbstractMesh = originalMesh.createInstance(`${xrController.uniqueId}-handJoint-${i}`);\r\n            if (this.options.jointMeshes?.onHandJointMeshGenerated) {\r\n                const returnedMesh = this.options.jointMeshes.onHandJointMeshGenerated(newInstance as InstancedMesh, i, xrController.uniqueId);\r\n                if (returnedMesh) {\r\n                    if (returnedMesh !== newInstance) {\r\n                        newInstance.dispose();\r\n                        newInstance = returnedMesh;\r\n                    }\r\n                }\r\n            }\r\n            newInstance.isPickable = false;\r\n            if (this.options.jointMeshes?.enablePhysics) {\r\n                const props = this.options.jointMeshes.physicsProps || {};\r\n                const type = props.impostorType !== undefined ? props.impostorType : PhysicsImpostor.SphereImpostor;\r\n                newInstance.physicsImpostor = new PhysicsImpostor(newInstance, type, { mass: 0, ...props });\r\n            }\r\n            newInstance.rotationQuaternion = new Quaternion();\r\n            trackedMeshes.push(newInstance);\r\n        }\r\n\r\n        const webxrHand = new WebXRHand(xrController, trackedMeshes);\r\n\r\n        // get two new meshes\r\n        this._hands[xrController.uniqueId] = {\r\n            handObject: webxrHand,\r\n            id: WebXRHandTracking._idCounter++,\r\n        };\r\n\r\n        this.onHandAddedObservable.notifyObservers(webxrHand);\r\n    };\r\n\r\n    private _detachHand(controllerId: string) {\r\n        if (this._hands[controllerId]) {\r\n            this.onHandRemovedObservable.notifyObservers(this._hands[controllerId].handObject);\r\n            this._hands[controllerId].handObject.dispose();\r\n        }\r\n    }\r\n}\r\n\r\n//register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRHandTracking.Name,\r\n    (xrSessionManager, options) => {\r\n        return () => new WebXRHandTracking(xrSessionManager, options);\r\n    },\r\n    WebXRHandTracking.Version,\r\n    false\r\n);\r\n"]}