{"version":3,"file":"digitalRainPostProcess.js","sourceRoot":"","sources":["../../../sourceES6/postProcessesLibrary/src/digitalRain/digitalRainPostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["import { Nullable } from \"@babylonjs/core/types\";\r\nimport { serialize, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Matrix } from \"@babylonjs/core/Maths/math.vector\";\r\nimport { Camera } from \"@babylonjs/core/Cameras/camera\";\r\nimport { BaseTexture } from \"@babylonjs/core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { Effect } from \"@babylonjs/core/Materials/effect\";\r\nimport { PostProcess } from \"@babylonjs/core/PostProcesses/postProcess\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\n\r\nimport \"./digitalrain.fragment\";\r\n\r\n/**\r\n * DigitalRainFontTexture is the helper class used to easily create your digital rain font texture.\r\n *\r\n * It basically takes care rendering the font front the given font size to a texture.\r\n * This is used later on in the postprocess.\r\n */\r\nexport class DigitalRainFontTexture extends BaseTexture {\r\n\r\n    @serialize(\"font\")\r\n    private _font: string;\r\n\r\n    @serialize(\"text\")\r\n    private _text: string;\r\n\r\n    private _charSize: number;\r\n\r\n    /**\r\n     * Gets the size of one char in the texture (each char fits in size * size space in the texture).\r\n     */\r\n    public get charSize(): number {\r\n        return this._charSize;\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of the Digital Rain FontTexture class\r\n     * @param name the name of the texture\r\n     * @param font the font to use, use the W3C CSS notation\r\n     * @param text the caracter set to use in the rendering.\r\n     * @param scene the scene that owns the texture\r\n     */\r\n    constructor(name: string, font: string, text: string, scene: Nullable<Scene> = null) {\r\n        super(scene);\r\n\r\n        scene = this.getScene();\r\n\r\n        if (!scene) {\r\n            return;\r\n        }\r\n\r\n        this.name = name;\r\n        this._text == text;\r\n        this._font == font;\r\n\r\n        this.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n\r\n        // Get the font specific info.\r\n        var maxCharHeight = this.getFontHeight(font);\r\n        var maxCharWidth = this.getFontWidth(font);\r\n\r\n        this._charSize = Math.max(maxCharHeight.height, maxCharWidth);\r\n\r\n        // This is an approximate size, but should always be able to fit at least the maxCharCount.\r\n        var textureWidth = this._charSize;\r\n        var textureHeight = Math.ceil(this._charSize * text.length);\r\n\r\n        // Create the texture that will store the font characters.\r\n        this._texture = scene.getEngine().createDynamicTexture(textureWidth, textureHeight, false, Texture.NEAREST_SAMPLINGMODE);\r\n        //scene.getEngine().setclamp\r\n        var textureSize = this.getSize();\r\n\r\n        // Create a canvas with the final size: the one matching the texture.\r\n        var canvas = document.createElement(\"canvas\");\r\n        canvas.width = textureSize.width;\r\n        canvas.height = textureSize.height;\r\n        var context = <CanvasRenderingContext2D>canvas.getContext(\"2d\");\r\n        context.textBaseline = \"top\";\r\n        context.font = font;\r\n        context.fillStyle = \"white\";\r\n        context.imageSmoothingEnabled = false;\r\n\r\n        // Sets the text in the texture.\r\n        for (var i = 0; i < text.length; i++) {\r\n            context.fillText(text[i], 0, i * this._charSize - maxCharHeight.offset);\r\n        }\r\n\r\n        // Flush the text in the dynamic texture.\r\n        scene.getEngine().updateDynamicTexture(this._texture, canvas, false, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the max char width of a font.\r\n     * @param font the font to use, use the W3C CSS notation\r\n     * @return the max char width\r\n     */\r\n    private getFontWidth(font: string): number {\r\n        var fontDraw = document.createElement(\"canvas\");\r\n        var ctx = <CanvasRenderingContext2D>fontDraw.getContext('2d');\r\n        ctx.fillStyle = 'white';\r\n        ctx.font = font;\r\n\r\n        return ctx.measureText(\"W\").width;\r\n    }\r\n\r\n    // More info here: https://videlais.com/2014/03/16/the-many-and-varied-problems-with-measuring-font-height-for-html5-canvas/\r\n    /**\r\n     * Gets the max char height of a font.\r\n     * @param font the font to use, use the W3C CSS notation\r\n     * @return the max char height\r\n     */\r\n    private getFontHeight(font: string): { height: number, offset: number } {\r\n        var fontDraw = document.createElement(\"canvas\");\r\n        var ctx = <CanvasRenderingContext2D>fontDraw.getContext('2d');\r\n        ctx.fillRect(0, 0, fontDraw.width, fontDraw.height);\r\n        ctx.textBaseline = 'top';\r\n        ctx.fillStyle = 'white';\r\n        ctx.font = font;\r\n        ctx.fillText('jH|', 0, 0);\r\n        var pixels = ctx.getImageData(0, 0, fontDraw.width, fontDraw.height).data;\r\n        var start = -1;\r\n        var end = -1;\r\n        for (var row = 0; row < fontDraw.height; row++) {\r\n            for (var column = 0; column < fontDraw.width; column++) {\r\n                var index = (row * fontDraw.width + column) * 4;\r\n                if (pixels[index] === 0) {\r\n                    if (column === fontDraw.width - 1 && start !== -1) {\r\n                        end = row;\r\n                        row = fontDraw.height;\r\n                        break;\r\n                    }\r\n                    continue;\r\n                }\r\n                else {\r\n                    if (start === -1) {\r\n                        start = row;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return { height: (end - start) + 1, offset: start - 1 };\r\n    }\r\n\r\n    /**\r\n     * Clones the current DigitalRainFontTexture.\r\n     * @return the clone of the texture.\r\n     */\r\n    public clone(): DigitalRainFontTexture {\r\n        return new DigitalRainFontTexture(this.name, this._font, this._text, this.getScene());\r\n    }\r\n\r\n    /**\r\n     * Parses a json object representing the texture and returns an instance of it.\r\n     * @param source the source JSON representation\r\n     * @param scene the scene to create the texture for\r\n     * @return the parsed texture\r\n     */\r\n    public static Parse(source: any, scene: Scene): DigitalRainFontTexture {\r\n        var texture = SerializationHelper.Parse(() => new DigitalRainFontTexture(source.name, source.font, source.text, scene),\r\n            source, scene, null);\r\n\r\n        return texture;\r\n    }\r\n}\r\n\r\n/**\r\n * Option available in the Digital Rain Post Process.\r\n */\r\nexport interface IDigitalRainPostProcessOptions {\r\n\r\n    /**\r\n     * The font to use following the w3c font definition.\r\n     */\r\n    font?: string;\r\n\r\n    /**\r\n     * This defines the amount you want to mix the \"tile\" or caracter space colored in the digital rain.\r\n     * This number is defined between 0 and 1;\r\n     */\r\n    mixToTile?: number;\r\n\r\n    /**\r\n     * This defines the amount you want to mix the normal rendering pass in the digital rain.\r\n     * This number is defined between 0 and 1;\r\n     */\r\n    mixToNormal?: number;\r\n}\r\n\r\n/**\r\n * DigitalRainPostProcess helps rendering everithing in digital rain.\r\n *\r\n * Simmply add it to your scene and let the nerd that lives in you have fun.\r\n * Example usage: var pp = new DigitalRainPostProcess(\"digitalRain\", \"20px Monospace\", camera);\r\n */\r\nexport class DigitalRainPostProcess extends PostProcess {\r\n\r\n    /**\r\n     * The font texture used to render the char in the post process.\r\n     */\r\n    private _digitalRainFontTexture: DigitalRainFontTexture;\r\n\r\n    /**\r\n     * This defines the amount you want to mix the \"tile\" or caracter space colored in the digital rain.\r\n     * This number is defined between 0 and 1;\r\n     */\r\n    public mixToTile: number = 0;\r\n\r\n    /**\r\n     * This defines the amount you want to mix the normal rendering pass in the digital rain.\r\n     * This number is defined between 0 and 1;\r\n     */\r\n    public mixToNormal: number = 0;\r\n\r\n    /**\r\n     * Instantiates a new Digital Rain Post Process.\r\n     * @param name the name to give to the postprocess\r\n     * @camera the camera to apply the post process to.\r\n     * @param options can either be the font name or an option object following the IDigitalRainPostProcessOptions format\r\n     */\r\n    constructor(name: string, camera: Camera, options?: string | IDigitalRainPostProcessOptions) {\r\n        super(name,\r\n            'digitalrain',\r\n            ['digitalRainFontInfos', 'digitalRainOptions', 'cosTimeZeroOne', 'matrixSpeed'],\r\n            ['digitalRainFont'],\r\n            {\r\n                width: camera.getEngine().getRenderWidth(),\r\n                height: camera.getEngine().getRenderHeight()\r\n            },\r\n            camera,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            camera.getEngine(),\r\n            true);\r\n\r\n        // Default values.\r\n        var font = \"15px Monospace\";\r\n        var characterSet = \"古池や蛙飛び込む水の音ふるいけやかわずとびこむみずのおと初しぐれ猿も小蓑をほしげ也はつしぐれさるもこみのをほしげなり江戸の雨何石呑んだ時鳥えどのあめなんごくのんだほととぎす\";\r\n\r\n        // Use options.\r\n        if (options) {\r\n            if (typeof (options) === \"string\") {\r\n                font = <string>options;\r\n            }\r\n            else {\r\n                font = (<IDigitalRainPostProcessOptions>options).font || font;\r\n                this.mixToTile = (<IDigitalRainPostProcessOptions>options).mixToTile || this.mixToTile;\r\n                this.mixToNormal = (<IDigitalRainPostProcessOptions>options).mixToNormal || this.mixToNormal;\r\n            }\r\n        }\r\n\r\n        this._digitalRainFontTexture = new DigitalRainFontTexture(name, font, characterSet, camera.getScene());\r\n        var textureSize = this._digitalRainFontTexture.getSize();\r\n\r\n        var alpha = 0.0;\r\n        var cosTimeZeroOne = 0.0;\r\n        var matrix = Matrix.FromValues(\r\n            Math.random(), Math.random(), Math.random(), Math.random(),\r\n            Math.random(), Math.random(), Math.random(), Math.random(),\r\n            Math.random(), Math.random(), Math.random(), Math.random(),\r\n            Math.random(), Math.random(), Math.random(), Math.random()\r\n        );\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setTexture(\"digitalRainFont\", this._digitalRainFontTexture);\r\n\r\n            effect.setFloat4(\"digitalRainFontInfos\",\r\n                this._digitalRainFontTexture.charSize,\r\n                characterSet.length,\r\n                textureSize.width,\r\n                textureSize.height);\r\n\r\n            effect.setFloat4(\"digitalRainOptions\",\r\n                this.width,\r\n                this.height,\r\n                this.mixToNormal,\r\n                this.mixToTile);\r\n\r\n            effect.setMatrix(\"matrixSpeed\",\r\n                matrix);\r\n\r\n            alpha += 0.003;\r\n            cosTimeZeroOne = alpha;\r\n            effect.setFloat('cosTimeZeroOne', cosTimeZeroOne);\r\n        };\r\n    }\r\n}\r\n"]}