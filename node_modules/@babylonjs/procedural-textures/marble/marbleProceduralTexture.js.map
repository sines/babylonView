{"version":3,"file":"marbleProceduralTexture.js","sourceRoot":"","sources":["../../../sourceES6/proceduralTexturesLibrary/src/marble/marbleProceduralTexture.ts"],"names":[],"mappings":"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","sourcesContent":["import { serialize, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\r\nimport { Color3 } from \"@babylonjs/core/Maths/math.color\";\r\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\r\nimport { ProceduralTexture } from \"@babylonjs/core/Materials/Textures/Procedurals/proceduralTexture\";\r\nimport { Scene } from \"@babylonjs/core/scene\";\r\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\r\n\r\nimport \"./marbleProceduralTexture.fragment\";\r\n\r\nexport class MarbleProceduralTexture extends ProceduralTexture {\r\n    private _numberOfTilesHeight: number = 3;\r\n    private _numberOfTilesWidth: number = 3;\r\n    private _amplitude: number = 9.0;\r\n    private _jointColor = new Color3(0.72, 0.72, 0.72);\r\n\r\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, \"marbleProceduralTexture\", scene, fallbackTexture, generateMipMaps);\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    public updateShaderUniforms() {\r\n        this.setFloat(\"numberOfTilesHeight\", this._numberOfTilesHeight);\r\n        this.setFloat(\"numberOfTilesWidth\", this._numberOfTilesWidth);\r\n        this.setFloat(\"amplitude\", this._amplitude);\r\n        this.setColor3(\"jointColor\", this._jointColor);\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfTilesHeight(): number {\r\n        return this._numberOfTilesHeight;\r\n    }\r\n\r\n    public set numberOfTilesHeight(value: number) {\r\n        this._numberOfTilesHeight = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get amplitude(): number {\r\n        return this._amplitude;\r\n    }\r\n\r\n    public set amplitude(value: number) {\r\n        this._amplitude = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get numberOfTilesWidth(): number {\r\n        return this._numberOfTilesWidth;\r\n    }\r\n\r\n    public set numberOfTilesWidth(value: number) {\r\n        this._numberOfTilesWidth = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    @serialize()\r\n    public get jointColor(): Color3 {\r\n        return this._jointColor;\r\n    }\r\n\r\n    public set jointColor(value: Color3) {\r\n        this._jointColor = value;\r\n        this.updateShaderUniforms();\r\n    }\r\n\r\n    /**\r\n     * Serializes this marble procedural texture\r\n     * @returns a serialized marble procedural texture object\r\n     */\r\n    public serialize(): any {\r\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\r\n        serializationObject.customType = \"BABYLON.MarbleProceduralTexture\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a Marble Procedural Texture from parsed marble procedural texture data\r\n     * @param parsedTexture defines parsed texture data\r\n     * @param scene defines the current scene\r\n     * @param rootUrl defines the root URL containing marble procedural texture information\r\n     * @returns a parsed Marble Procedural Texture\r\n     */\r\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): MarbleProceduralTexture {\r\n        var texture = SerializationHelper.Parse(() => new MarbleProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\r\n\r\n        return texture;\r\n    }\r\n}\r\n\r\n_TypeStore.RegisteredTypes[\"BABYLON.MarbleProceduralTexture\"] = MarbleProceduralTexture;"]}