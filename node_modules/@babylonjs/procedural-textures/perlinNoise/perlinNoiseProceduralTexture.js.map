{"version":3,"file":"perlinNoiseProceduralTexture.js","sourceRoot":"","sources":["../../../sourceES6/proceduralTexturesLibrary/src/perlinNoise/perlinNoiseProceduralTexture.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAE,mBAAmB,EAAE,MAAM,iCAAiC,CAAC;AAEjF,OAAO,EAAE,iBAAiB,EAAE,MAAM,kEAAkE,CAAC;AAErG,OAAO,EAAE,UAAU,EAAE,MAAM,gCAAgC,CAAC;AAE5D,OAAO,yCAAyC,CAAC;AAEjD;IAAkD,gDAAiB;IAY/D,sCAAY,IAAY,EAAE,IAAY,EAAE,KAAY,EAAE,eAAyB,EAAE,eAAyB;QAA1G,YACI,kBAAM,IAAI,EAAE,IAAI,EAAE,8BAA8B,EAAE,KAAK,EAAE,eAAe,EAAE,eAAe,CAAC,SAE7F;QAbM,UAAI,GAAW,GAAG,CAAC;QAGnB,eAAS,GAAW,GAAG,CAAC;QAGxB,sBAAgB,GAAW,GAAG,CAAC;QAE9B,yBAAmB,GAAW,CAAC,CAAC;QAIpC,KAAI,CAAC,oBAAoB,EAAE,CAAC;;IAChC,CAAC;IAEM,2DAAoB,GAA3B;QACI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAY,CAAC,CAAC;QAEtD,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAE5B,IAAI,CAAC,KAAK,EAAE;YACR,OAAO;SACV;QACD,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC,YAAY,EAAE,CAAC;QAEjD,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC;QACvB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC;QAEzD,IAAI,CAAC,mBAAmB,IAAI,SAAS,GAAG,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC;QACvE,IAAI,CAAC,QAAQ,CAAC,kBAAkB,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAChE,CAAC;IAEM,6CAAM,GAAb,UAAc,oBAA8B;QACxC,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,iBAAM,MAAM,YAAC,oBAAoB,CAAC,CAAC;IACvC,CAAC;IAEM,6CAAM,GAAb,UAAc,IAAS,EAAE,eAAoB;QACzC,iBAAM,MAAM,YAAC,IAAI,EAAE,eAAe,CAAC,CAAC;IACxC,CAAC;IAED;;;OAGG;IACI,gDAAS,GAAhB;QACI,IAAI,mBAAmB,GAAG,mBAAmB,CAAC,SAAS,CAAC,IAAI,EAAE,iBAAM,SAAS,WAAE,CAAC,CAAC;QACjF,mBAAmB,CAAC,UAAU,GAAG,sCAAsC,CAAC;QAExE,OAAO,mBAAmB,CAAC;IAC/B,CAAC;IAED;;;;;;OAMG;IACW,kCAAK,GAAnB,UAAoB,aAAkB,EAAE,KAAY,EAAE,OAAe;QACjE,IAAI,OAAO,GAAG,mBAAmB,CAAC,KAAK,CAAC,cAAM,OAAA,IAAI,4BAA4B,CAAC,aAAa,CAAC,IAAI,EAAE,aAAa,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,aAAa,CAAC,gBAAgB,CAAC,EAA3H,CAA2H,EAAE,aAAa,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QAE1M,OAAO,OAAO,CAAC;IACnB,CAAC;IA/DD;QADC,SAAS,EAAE;8DACc;IAG1B;QADC,SAAS,EAAE;mEACmB;IAG/B;QADC,SAAS,EAAE;0EAC0B;IA0D1C,mCAAC;CAAA,AAlED,CAAkD,iBAAiB,GAkElE;SAlEY,4BAA4B;AAoEzC,UAAU,CAAC,eAAe,CAAC,sCAAsC,CAAC,GAAG,4BAA4B,CAAC","sourcesContent":["import { serialize, SerializationHelper } from \"@babylonjs/core/Misc/decorators\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport { ProceduralTexture } from \"@babylonjs/core/Materials/Textures/Procedurals/proceduralTexture\";\nimport { Scene } from \"@babylonjs/core/scene\";\nimport { _TypeStore } from '@babylonjs/core/Misc/typeStore';\n\nimport \"./perlinNoiseProceduralTexture.fragment\";\n\nexport class PerlinNoiseProceduralTexture extends ProceduralTexture {\n    @serialize()\n    public time: number = 0.0;\n\n    @serialize()\n    public timeScale: number = 1.0;\n\n    @serialize()\n    public translationSpeed: number = 1.0;\n\n    private _currentTranslation: number = 0;\n\n    constructor(name: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\n        super(name, size, \"perlinNoiseProceduralTexture\", scene, fallbackTexture, generateMipMaps);\n        this.updateShaderUniforms();\n    }\n\n    public updateShaderUniforms() {\n        this.setFloat(\"size\", this.getRenderSize() as number);\n\n        let scene = this.getScene();\n\n        if (!scene) {\n            return;\n        }\n        var deltaTime = scene.getEngine().getDeltaTime();\n\n        this.time += deltaTime;\n        this.setFloat(\"time\", this.time * this.timeScale / 1000);\n\n        this._currentTranslation += deltaTime * this.translationSpeed / 1000.0;\n        this.setFloat(\"translationSpeed\", this._currentTranslation);\n    }\n\n    public render(useCameraPostProcess?: boolean) {\n        this.updateShaderUniforms();\n        super.render(useCameraPostProcess);\n    }\n\n    public resize(size: any, generateMipMaps: any): void {\n        super.resize(size, generateMipMaps);\n    }\n\n    /**\n     * Serializes this perlin noise procedural texture\n     * @returns a serialized perlin noise procedural texture object\n     */\n    public serialize(): any {\n        var serializationObject = SerializationHelper.Serialize(this, super.serialize());\n        serializationObject.customType = \"BABYLON.PerlinNoiseProceduralTexture\";\n\n        return serializationObject;\n    }\n\n    /**\n     * Creates a Perlin Noise Procedural Texture from parsed perlin noise procedural texture data\n     * @param parsedTexture defines parsed texture data\n     * @param scene defines the current scene\n     * @param rootUrl defines the root URL containing perlin noise procedural texture information\n     * @returns a parsed Perlin Noise Procedural Texture\n     */\n    public static Parse(parsedTexture: any, scene: Scene, rootUrl: string): PerlinNoiseProceduralTexture {\n        var texture = SerializationHelper.Parse(() => new PerlinNoiseProceduralTexture(parsedTexture.name, parsedTexture._size, scene, undefined, parsedTexture._generateMipMaps), parsedTexture, scene, rootUrl);\n\n        return texture;\n    }\n}\n\n_TypeStore.RegisteredTypes[\"BABYLON.PerlinNoiseProceduralTexture\"] = PerlinNoiseProceduralTexture;"]}